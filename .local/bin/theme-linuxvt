#!/bin/sh
# @file theme-linuxvt
# @brief Changes the colors of the Linux VT
# @description
#     Adds kernel paramaters to grub to change the Linux VT colors
#     Requires the file location of a theme.ini as an argument

# @section Variable Definitions
color0="#202020"
color1="#AC4142"
color2="#90A959"
color3="#F4BF75"
color4="#6A9FB5"
color5="#AA759F"
color6="#75B5AA"
color7="#D0D0D0"
color8="#404040"
color9="#AC4142"
color10="#90A959"
color11="#F4BF75"
color12="#6A9FB5"
color13="#AA759F"
color14="#75B5AA"
color15="#F5F5F5"
help_string="Usage: theme-linuxvt [OPTION] FILE
Change the colors of the Linux VT by adding kernel parameters

  -h, --help    display this help and exit"


# @section Function Definitions
# @description Print a formatted error message
# @arg $1 string The error message to print
err() {
    printf "[\033[1;31mERR\033[m] %s\n" "${1}" >&2
}


# @description Print a formatted info message
# @arg $1 string The info message to print
info() {
    printf "[\033[1;32mINFO\033[m] %s\n" "${1}"
}


# @description Print the help message
# @noargs
print_help() {
    printf "%b\n" "${help_string}"
    exit 0
}


# @description Split a string on a delimiter
# @arg $1 string The string to split
# @arg $2 string The delimiter to use
split_string() {
    string=${1}
    delimiter=${2}

    string="${string}${delimiter}"
    while [ "${string}" ]; do
        printf "%s\n" "${string%%${delimiter}*}"
        string=${string#*${delimiter}};
    done
}


# @description Genereate the kernel parameters
# @noargs
# @stdout The generated kernel parameters
get_colors_as_params() {
    reds="vt.default_red="
    greens="vt.default_grn="
    blues="vt.default_blu="
    i=0
    while [ ${i} -le 15 ]; do
        color=
        eval "color=\${color${i}}"

        red=${color#?}
        red=${red%????}
        reds="${reds}0x${red},"

        green=${color#???}
        green=${green%??}
        greens="${greens}0x${green},"

        blue=${color#?????}
        blues="${blues}0x${blue},"
        i=$((i + 1))
    done
    printf "%s %s %s\n" "${reds%?}" "${greens%?}" "${blues%?}"
}


# @description Generate the edited grub config
# @noargs
# @stdout The generated grub config
generate_grub_config() {
    while IFS= read -r line; do
        if [ "${line}" ] && ! [ "${line%%GRUB_CMDLINE_LINUX_DEFAULT=\"*\"}" ]; then
            param=${line#*=\"}
            param=${param%\"}
            if [ "${param}" ]; then
                param="${param} "
            fi

            param="${param}$(get_colors_as_params)"

            printf "GRUB_CMDLINE_LINUX_DEFAULT=\"%s\"\n" "${param}"
        else
            printf "%s\n" "${line}"
        fi
    done < /etc/default/grub
}


# @description The main function
# @noargs
main() {
    for arg in "${@}"; do
        case ${arg} in
            -h|--help) print_help
        esac
    done

    [ -f /etc/default/grub ] || { err "'/etc/default/grub' doesn't seem to exist"; return 1; }
    [ -w /etc/default/grub ] || {
        err "Unable to write to '/etc/default/grub', permission denied"
        return 1
    }

    grub_config=$(generate_grub_config)

    printf "%s\n" "${grub_config}" > /etc/default/grub

    grub-mkconfig -o /boot/grub/grub.cfg
}


main "${@}"
