#!/bin/env sh
# @file sys
# @brief A script to configure the system

# @section Color Variables
color0="#202020"
color1="#AC4142"
color2="#90A959"
color3="#F4BF75"
color4="#6A9FB5"
color5="#AA759F"
color6="#75B5AA"
color7="#D0D0D0"
color8="#404040"
color9="#AC4142"
color10="#90A959"
color11="#F4BF75"
color12="#6A9FB5"
color13="#AA759F"
color14="#75B5AA"
color15="#F5F5F5"

# @section Help strings
help_msg_main="\
Usage: sys <command> [<args>]

Options:
    -h, --help      display this help and exit

Available commands:
    fix             fix a bug
    config          configure the environment"

help_msg_fix="\
Usage: sys fix <bugs>

Options:
    -h, --help      display this help and exit

Available bugs:
    screentear
    touchpad_taptoclick"

help_msg_config="\
Usage: sys config <configs>

Options:
    -h, --help      display this help and exit

Available configs:
    grub
    linuxvt
    auto_cpufreq
    termux"

# @section Helper Functions
# @description Print an error message to stderr
# @arg $1 string The error message
error() {
    string=${1}
    printf "\033[1;31mError\033[m: %s\n" "${string}" 
}

# @description Get the directory of a file/directory
# @arg $1 string The path
get_dir() {
    path=${1}

    if [ "${path##*/}" ]; then
        path=${path%/}
    fi

    printf "%s/\n" "${path%/*}"
}

# @section "fix" command

# @description Subcommand to fix screentearing
# @noargs
_fix_screentear() {
    path=/etc/X11/xorg.conf.d/20-intel.conf
    dir=$(get_dir "${path}")

    if ! [ -d "${dir}" ]; then
        mkdir -pv "${dir}" || return 1
    fi

    if ! [ -w "${dir}" ]; then
        error "\"${dir}\" is not writeable, permission denied"
        return 1
    fi

    printf "%s\n"\
           'Section "Device"'\
           '    Identifier "Intel Graphics"'\
           '    Driver "intel"'\
           '    Option "TearFree" "true"'\
           'EndSection' > ${path}
}

# @description Subcommand to enable tap to click for touchpads
# @noargs
_fix_touchpad_taptoclick() {
	path=/etc/X11/xorg.conf.d/99-synaptics-overrides.conf

    ensure_deps Xorg || return 1;
    mkdir -pv "$(get_dir "${path}")" || return 1

	printf "%s\n" \
		   'Section  "InputClass"' \
		   '    Identifier  "touchpad overrides"' \
		   '    Driver "libinput"' \
		   '    MatchIsTouchpad "on"' \
		   '    Option "Tapping" "on"' \
		   '    Option "TappingButtonMap" "lmr"' \
		   'EndSection' \
		   > ${file}
}

# @description Fix the system of known bugs
# @arg $@ string The items to fix
fix() {
    OPTIND=1
    while getopts ":h-:" opt "$@"; do
        case "${opt}" in
	        *) printf "%s\n" "${help_msg_fix}"
               return 0
		       ;;
        esac
    done

    shift $((OPTIND - 1))


    if ! [ "${1}" ]; then
        printf "%s\n" "${help_msg_fix}"
        return 1
    fi

    for item in "${@}"; do
        if ! [ "$(command -v "_fix_${item}")" ]; then
            error "Unknown item \"${item}\""
            return 1
        fi
    done

    print_newline=false
    for item in "${@}"; do
        if ${print_newline}; then
            printf "\n"
        else
            print_newline=true
        fi

        printf "\033[4mFixing %s\033[m\n" "${item}"
        "_fix_${item}"
    done
}

# @section "config" command

# @description Update grub
# @noargs
update_grub() {
    if [ "$(command -v update-grub)" ]; then
        update_grub
    else
        grub-mkconfig -o /boot/grub/grub.cfg
    fi
}

# @description Generate the kernel parameters
# @noargs
# @stdout The generated kernel parameters
get_linuxvt_colors_as_params() {
    reds="vt.default_red="
    greens="vt.default_grn="
    blues="vt.default_blu="
    i=0
    while [ ${i} -le 15 ]; do
        color=
        eval "color=\${color${i}}"

        red=${color#?}
        red=${red%????}
        reds="${reds}0x${red},"

        green=${color#???}
        green=${green%??}
        greens="${greens}0x${green},"

        blue=${color#?????}
        blues="${blues}0x${blue},"
        i=$((i + 1))
    done
    printf "%s %s %s\n" "${reds%?}" "${greens%?}" "${blues%?}"
}

# @description Generates the theme for GRUB
# @stdout The generated GRUB theme
generate_grub_theme() {
    printf "%s\n" "title-text: \"\"
desktop-color: \"${color0}\"
terminal-left: \"0\"
terminal-top: \"0\"
terminal-border: \"0\"
terminal-width: \"100%\"
terminal-height: \"100%\"

+ label {
  width = 100%
  top = 5%
  text = \"Welcome To Your Computer\"
  align = \"center\"
  color = \"${color7}\"
}

+ label {
  id = \"__timeout__\"
  width = 100%
  top = 10%
  text = \"Booting in %d seconds\"
  align = \"center\"
  color = \"${color7}\"
}

+ boot_menu {
  left = 15
  top = 20%
  width = 70%
  height = 70%
  item_color = \"${color8}\"
  selected_item_color = \"${color7}\"
  item_icon_space = 25
  item_height = 20
  item_padding = 20
  item_spacing = 10
}"
}

# @description Generates the config for GRUB to then be updated with
#              update-grub`
# @noargs
# @stdout The generated GRUB theme
generate_grub_config() {
    entry_added=false
    while read -r line; do
        if [ "${line}" ] && ! [ "${line%%GRUB_THEME=*}" ]; then
            printf "GRUB_THEME=/boot/grub/themes/theme.txt\n"
            entry_added=true
        elif [ "${line}" ] && ! [ "${line%%GRUB_CMDLINE_LINUX_DEFAULT=*}" ]; then
            params=${line#GRUB_CMDLINE_LINUX_DEFAULT=\"}
            params=${params%\"}

            if [ "${params}" ]; then
                params="${params} "
            fi

            params="${params}loglevel=3"

            printf "GRUB_CMDLINE_LINUX_DEFAULT=\"%s\"\n" "${params}"
        else
            printf "%s\n" "${line}"
        fi
    done < /etc/default/grub

    if ! ${entry_added}; then
        printf "\n# Custom theme\n"
        printf "GRUB_THEME=/boot/grub/themes/theme.txt\n"
    fi
}

# @description Generate the edited grub config
# @noargs
# @stdout The generated grub config
generate_grub_linuxvt_config() {
    while IFS= read -r line; do
        if [ "${line}" ] && ! [ "${line%%GRUB_CMDLINE_LINUX_DEFAULT=\"*\"}" ]; then
            param=${line#*=\"}
            param=${param%\"}
            if [ "${param}" ]; then
                param="${param} "
            fi

            param="${param}$(get_linuxvt_colors_as_params)"

            printf "GRUB_CMDLINE_LINUX_DEFAULT=\"%s\"\n" "${param}"
        else
            printf "%s\n" "${line}"
        fi
    done < /etc/default/grub
}

# @description Generate a termux theme
# @noargs
# @stdout The generated termux theme
generate_termux_theme() {
    printf "# Generated by \"sys\"\n"

    i=0
    while [ "${i}" -le 15 ]; do
        color=
        eval "color=\${color${i}}"
        printf "color%d=%s\n" "${i}" "${color}"
        i=$((i + 1))
    done

    printf "foreground=%s\n" "${color7}"
    printf "background=%s\n" "${color0}"
    printf "cursor=%s\n" "${color7}"
}

# @description Generate an auto-cpufreq config file
# @noargs
# @stdout The generated auto-cpufreq config
generate_auto_cpufreq_config() {
    printf "%s\n"\
           "# Generated by \"sys\""\
           "# For reference, see https://github.com/AdnanHodzic/auto-cpufreq?tab=readme-ov-file#4-auto-cpufreq-config-file"\
           "[charger]"\
           "governor = performance"\
           "energy_performance_preference = performance"\
           "energy_perf_bias = performance"\
           "platform_profile = performance"\
           "turbo = always"\
           ""\
           "[battery]"\
           "governor = powersave"\
           "energy_performance_preference = power"\
           "energy_perf_bias = power"\
           "platform_profile = low-profile"\
           "turbo = auto"
}

# @description Add configuration for grub
# @noargs
_config_grub() {
    theme_file=/boot/grub/themes/theme.txt
    theme_dir=$(get_dir "${theme_file}")
    conf_file=/etc/default/grub

    if ! [ -w "${conf_file}" ]; then
        error "Unable to write to \"${conf_file}\", permission denied"
        return 1
    fi

    if ! [ -d "${theme_dir}" ]; then
        mkdir -pv "${theme_dir}" || return 1
    fi

    grub_theme=$(generate_grub_theme)
    grub_config=$(generate_grub_config)

    printf "%s\n" "${grub_theme}" > "${theme_file}"
    printf "%s\n" "${grub_config}" > "${conf_file}"

    update-grub
}

# @description Add configuration for the linuxvt
# @noargs
_config_linuxvt() {
    if ! [ -f /etc/default/grub ]; then
        error "'/etc/default/grub' doesn't seem to exist"
        return 1
    fi

    if ! [ -w /etc/default/grub ]; then
        error "Unable to write to \"/etc/default/grub\", permission denied"
        return 1
    fi

    grub_config=$(generate_grub_linuxvt_config)

    printf "%s\n" "${grub_config}" > /etc/default/grub

    update-grub
}

# @description Add the system-wide configuration for auto-cpufreq
# @noargs
_config_auto_cpufreq() {
    file="/etc/auto-cpufreq.conf"
    dir=$(get_dir "${file}")

    if ! [ -w "${dir}" ]; then
        error "Unable to write to \"${dir}\", permission denied"
        return 1
    fi

    generate_auto_cpufreq_config > "${file}"
}

# @description Configure termux (colors)
# @noargs
_config_termux() {
    file="${HOME}"/.termux/colors.properties
    mkdir -pv "$(get_dir "${file}")"
    generate_termux_theme > "${file}"
}

# @description Configure the system
# @arg $@ string The items to configure
config() {
    OPTIND=1
    while getopts ":h-:" opt "$@"; do
        case "${opt}" in
	        *) printf "%s\n" "${help_msg_config}"
               return 0
		       ;;
        esac
    done

    if ! [ "${1}" ]; then
        printf "%s\n" "${help_msg_config}"
    fi

    for item in "${@}"; do
        if ! [ "$(command -v "_config_${item}")" ]; then
            error "Unknown item \"${item}\""
            return 1
        fi
    done

    print_newline=false
    for item in "${@}"; do
        if ${print_newline}; then
            printf "\n"
        else
            print_newline=true
        fi

        printf "\033[4mConfiguring %s\033[m\n" "${item}"
        "_config_${item}"
    done

}

# @section The main function
# @description The main function
# @arg $@ string The arguments
main() {
    OPTIND=1
    while getopts ":h-:" opt "${@}"; do
        case "${opt}" in
	        *) printf "%s\n" "${help_msg_fix}"
               return 0
		       ;;
        esac
    done

    shift $((OPTIND - 1))

    if ! [ "${1}" ]; then
        printf "%s\n" "${help_msg_main}"
        return 1
    fi

    cmd=${1}

    shift

    if ! [ "$(command -v "${cmd}")" ]; then
        error "Unknown command \"${cmd}\""
        return 1
    fi

    ${cmd} "${@}"
}

main "${@}"
