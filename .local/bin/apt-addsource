#!/bin/sh
available_recipes=""
newline="
"

# @description Print an error message to stderr
# @arg $1 string The error message
error() {
    printf "\033[1;31mError:\033[m %s\n" "${1}" >&2
}

# @description Create a recipe
# @arg $1 string The URI
# @arg $2 string The key url
# @arg $3 string The name
# @arg $4 string The type ("source" or "list")
make_recipe() {
    uri=${1}
    key_url=${2}
    source_name=${3}
    type=${4}

    if [ "${available_recipes}" ]; then
        available_recipes="${available_recipes}${newline}"
    fi
    available_recipes="${available_recipes}${uri}|${key_url}|${source_name}|${type}"
}

# @description Get the URI of a recipe
# @arg $1 string The recipe
get_uri() {
    recipe=${1}
    printf "%s\n" "${recipe%%|*}"
}

# @description Get the key url of a recipe
# @arg $1 string The recipe
get_key_url() {
    recipe=${1}
    recipe=${recipe#*|}
    printf "%s\n" "${recipe%%|*}"
}

# @description Get the name of a recipe
# @arg $1 string The recipe
get_name() {
    recipe=${1}
    recipe=${recipe%|*}
    printf "%s\n" "${recipe##*|}"
}

# @description Get the type of a recipe
# @arg $1 string The recipe
get_type() {
    recipe=${1}
    printf "%s\n" "${recipe##*|}"
}

# @description Get the full recipe from the recipe list
# @arg $1 string The name of the recipe
get_recipe() {
    name=${1}
    for line in ${available_recipes}; do
        tmp=${line}
        tmp=${tmp##*|"${name}"|*}
        if ! [ "${tmp}" ]; then
            printf "%s" "${line}"
            return 0
        fi
    done

    return 1
}

# @description Downloads a page from the internet
# @arg $1 string The url
# @arg $2 string The file destination
download() {
	url=${1}
	file=${2}
	if [ "$(command -v curl)" ]; then
		curl -Ls "${url}" -o "${file}"
	elif [ "$(command -v curl)" ]; then
		wget -q "${url}" -O "${file}"
	fi
}

# @description Print a source template using a recipe
# @arg $1 string The recipe
print_template() {
    recipe=${1}
    source_name=$(get_name "${recipe}")
    uri=$(get_uri "${recipe}")

    printf "%s\n"\
           "Types: deb"\
           "URIs: ${uri}"\
           "Suites: $(lsb_release -sc)"\
           "Components: main"\
           "Signed-By: /usr/share/keyrings/${source_name}.gpg"
}

# @description Add the source to /etc/apt/sources.list.d
# @arg $1 string The recipe
add_source() {
    recipe=${1}
    name=$(get_name "${recipe}")

    if [ "$(get_type "${recipe}")" = "source" ]; then
        download "$(get_uri "${recipe}")" /etc/apt/sources.list.d/"${name}.sources"
    else
        print_template "${recipe}" > /etc/apt/sources.list.d/"${name}.sources"
    fi

    key_url=$(get_key_url "${recipe}")
    if ! [ "${key_url##*.asc}" ]; then
        download "${key_url}" - |
            gpg --dearmor --yes -o /usr/share/keyrings/"${name}.gpg"
    elif ! [ "${key_url##*.gpg}" ]; then
        download "${key_url}" /usr/share/keyrings/"${name}.gpg"
    fi
}

main() {
    if ! [ "$(command -v curl)" ] && ! [ "$(command -v wget)" ]; then
        error "Command 'curl' and 'wget' not found. Either 'curl' or 'wget' is required"
        return 1
    fi

    # Generate recipes
    make_recipe "https://debian.griffo.io/apt" "https://debian.griffo.io/EA0F721D231FDD3A0A17B9AC7808B4DD62C41256.asc" "debian.griffo.io" list
    make_recipe "https://brave-browser-apt-release.s3.brave.com/brave-browser.sources" "https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg" "brave-browser" source

    for name in "${@}"; do
        add_source "$(get_recipe "${name}")"
    done
}

main "${@}"
