#!/bin/sh
# @file theme-grub
# @brief Creates a GRUB theme
# @description
#     Creates a grub theme to /boot/grub/themes/theme.txt


# @section Variable Definitions
help_string="Usage: theme-termux [OPTION] [FILE]
Generate a theme for GRUB writing it to /boot/grub/themes/theme.txt using the
theme from FILE or ~/.config/theme.ini if FILE isn't provided.

  -h, --help    display this help and exit"

# @section Function Definitions
# @description Print a formatted error message
# @arg $1 string The error message to print
# @stderr The formatted error message
err() {
    printf "[\033[1;31mERR\033[m] %s\n" "${1}" >&2
}


# @description Print the help message
# @noargs
# @stdout The help message
print_help() {
    printf "%b\n" "${help_string}"
}


# @description Generates the theme for GRUB
# @arg $1 string The background color
# @arg $2 string The selected foreground color
# @arg $2 string The unselected foreground color
# @stdout The generated GRUB theme
generate_theme() {
    bg=${1}
    fg_selected=${2}
    fg_unselected=${3}
    printf "%s\n" "title-text: \"\"
desktop-color: \"${bg}\"
terminal-left: \"0\"
terminal-top: \"0\"
terminal-border: \"0\"
terminal-width: \"100%\"
terminal-height: \"100%\"

+ label {
  width = 100%
  top = 5%
  text = \"Welcome To Your Computer\"
  align = \"center\"
  color = \"${fg_selected}\"
}

+ label {
  id = \"__timeout__\"
  width = 100%
  top = 10%
  text = \"Booting in %d seconds\"
  align = \"center\"
  color = \"${fg_selected}\"
}

+ boot_menu {
  left = 15
  top = 20%
  width = 70%
  height = 70%
  item_color = \"${fg_unselected}\"
  selected_item_color = \"${fg_selected}\"
  item_icon_space = 25
  item_height = 20
  item_padding = 20
  item_spacing = 10
}"
}


# @description Generates the config for GRUB to then be updated with
#              update-grub`
# @noargs
# @stdout The generated GRUB theme
generate_grub_config() {
    entry_added=false
    while read -r line; do
        if ! [ "${line}" ]; then
            printf "\n"
        elif ! [ "${line%%GRUB_THEME=*}" ]; then
            printf "GRUB_THEME=/boot/grub/themes/theme.txt\n"
            entry_added=true
        else
            printf "%s\n" "${line}"
        fi
    done < /etc/default/grub

    if ! ${entry_added}; then
        printf "# Added"
        printf "GRUB_THEME=/boot/grub/themes/theme.txt\n"
    fi
}


# @description Main function
main() {
    if [ ${#} -gt 1 ]; then
        print_help
        exit 1
    fi

    case ${1} in
        -h|--help) print_help
                   exit 0
                   ;;
    esac

    if ! [ "$(command -v update-grub)" ]; then
        err "Executable \`update-grub\` not found"
        exit 1
    fi

    file="${1:-${HOME}/.config/theme.ini}"
    bg=
    fg_selected=
    fg_unselected=
    while IFS= read -r line; do
        [ "${line%%#*}" ] || continue # Skip comments
        IFS=" =" read -r key value << EOF
${line}
EOF
        [ "${key}" = "color0" ] && bg=${value} && continue
        [ "${key}" = "color7" ] && fg_selected=${value} && continue
        [ "${key}" = "color8" ] && fg_unselected=${value}
    done <"${file}"

    if ! { [ "${bg}" ] && [ "${fg_selected}" ] && [ "${fg_unselected}" ]; }; then
        err "Missing essential colors"
        exit 1
    fi

    if ! [ -w /boot/grub/themes/ ]; then
        err "Unable to write to /boot/grub/themes/, you might need escalated permissions"
        exit 1
    fi

    if ! [ -w /etc/default/grub ]; then
        err "Unable to write to /etc/default/grub, you might need escalated permissions"
        exit 1
    fi

    generate_theme "${bg}" "${fg_selected}" "${fg_unselected}" > /boot/grub/themes/theme.txt
    generate_grub_config > /etc/default/grub 
    update-grub
}

main "${@}"
