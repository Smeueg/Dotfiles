#!/bin/python
import os


# Variables #
home   = os.environ["HOME"]
dotDir = home + "/.local/dots"
dotURL = "https://gitlab.com/Smeueg/Dotfiles.git"

wallpaperDir = home + "/.local/rice/wallpapers"
wallpapers   = {
        "Rock Thing.png" : "https://images2.alphacoders.com/950/950452.png"
}

sucklessDir = home + "/.local/rice"
fontsDir    = home + "/.local/share/fonts"



# Utilities #
def DownloadFile(url, file):
    from urllib.request import Request, urlopen

    if file[-1] == "/":
        file += url.split("/")[-1]

    req = Request(url, headers={'User-Agent': 'Mozilla/5.0'})

    with open(file, 'wb') as f:
        f.write(urlopen(req).read())

def confirm(string):
    if not string.endswith("[Y/n] "):
        if string[-1] != " ":
            string += " "
        string += "[Y/n] "

    confirmation = input(string).lower()

    if confirmation == "" or confirmation == "y" or confirmation == "yes":
        return True

    return False



# UI
import curses
stdscr = None
menu   = None


def drawMenu(choices, isSubmenu):
    global stdscr
    global menu

    menuH = len(choices)
    menuW = 0

    for choice in choices:
        if len(choice.name) > menuW:
            menuW = len(choice.name)

    if stdscr == None:
        stdscr = curses.initscr()

    menuH += 2
    menuW += 7
    menuY = (stdscr.getmaxyx()[0] - menuH) / 2
    menuX = (stdscr.getmaxyx()[1] - menuW) / 2

    if menu == None:
        menu = curses.newwin(0, 0)

    menu.resize(menuH, menuW)
    menu.mvwin(int(menuY), int(menuX))
    menu.box()


    curses.start_color()
    curses.use_default_colors()

    curses.init_pair(1, 1, -1) # grey foreground
    curses.init_pair(2, -1, 1) # grey background

    highlighted = 0
    while True:
        highlightedOffset = 1

        for index in range(menuH - 1):
            attr = [curses.A_NORMAL, curses.A_REVERSE][highlighted == index]

            if index != len(choices):
                offset = 1
                choice = choices[index]

                if choice.missingDep != []:
                    if highlighted == index:
                        attr = curses.color_pair(2)
                    else:
                        attr = curses.color_pair(1)

                if choice.submenu == None:
                    string = "[" + [" ", "X"][choices[index].toggled] + "]"
                else:
                    string = " * "

                string += " " + choices[index].name + " "
            else:
                string = [" CONTINUE ", " BACK "][isSubmenu]
                offset = int((menuW - len(string)) / 2)

            if highlighted == index:
                highlightedOffset = offset

            menu.addstr(index + 1, offset, string, attr)

        menu.move(highlighted+1, highlightedOffset)

        key = menu.getkey()


        if key == "j" or key == curses.KEY_DOWN:
            highlighted += (highlighted != menuH-2)
        elif key == "k" or key == curses.KEY_UP:
            highlighted -= (highlighted != 0)
        elif key == "g":
            highlighted = 0
        elif key == "G":
            highlighted = menuH - 2
        elif key == "a":
            selectedAll = True
            for choice in choices:
                if not choice.toggled and not choice.submenu:
                    selectedAll = False
                    break

            for choice in choices:
                if choice.submenu == None:
                    choice.toggled = not selectedAll

        elif key == "q":
            curses.endwin()
            exit(1)
        elif key == "\n" or key == " ":
            if highlighted == menuH-2:
                return True
            if choices[highlighted].missingDep != []:
                continue
            elif choices[highlighted].submenu == None:
                choices[highlighted].toggled = not choices[highlighted].toggled
            else:
                menu.clear()
                menu.refresh()
                if drawMenu(choices[highlighted].submenu, True):
                    menu.clear()
                    menu.resize(menuH, menuW)
                    menu.mvwin(int(menuY), int(menuX))
                    menu.box()



# Main Code #
class Choice:
    def __init__(self, name, submenu, func, arg, deps):
        self.name    = name
        self.submenu = submenu
        self.func    = func
        self.arg     = arg
        self.deps    = deps
        self.toggled = False


        self.missingDep = []

        if self.deps != None:
            path = os.environ["PATH"]
            if type(self.deps) == str:
                self.deps = [self.deps]

            for dep in self.deps:
                found = False
                for directory in path.split(":"):
                    if directory[-1] != "/":
                        directory += "/"

                    if os.access(directory + dep, os.X_OK):
                        found = True

                if not found:
                    self.missingDep.append(dep)

    def execute(self):
        if self.func == None:
            return

        submenuExec = False
        if self.submenu != None:
            for choice in self.submenu:
                if choice.toggled:
                    submenuExec = True
                    break

        if self.toggled or submenuExec:
            if self.arg == None:
                self.func()
            else:
                self.func(self.arg)



def CheckDep(choices):
    missingDeps = {}

    def getDeps(submenu, menu):
        for choice in submenu:
            if choice.submenu != None:
                getDeps(choice.submenu, choice.name)

            if choice.missingDep != []:
                for dep in choice.missingDep:
                    string = choice.name + ["", " \033[1m\033[3m\033[4min\033[0m " + menu][menu != ""]
                    if missingDeps.get(dep) == None:
                        missingDeps[dep] = [string]
                    else:
                        missingDeps[dep].append(string)


    getDeps(choices, "")

    if missingDeps == {}:
        return True

    print("\033[1;33m!! WARNING !!\033[0m")

    for dep in missingDeps:
        print("{} is required to install:".format(dep))
        for name in missingDeps[dep]:
            print("  - {}".format(name))
        print("")

    confirm = input("Do you still want to continue? [Y/n] ").lower()
    if confirm == "" or confirm == "y" or confirm == "yes":
        return True

    return False



def getDot():
    import subprocess
    print("\n\nDownloading dotfiles...")
    os.system("git clone --bare {} {}".format(dotURL, dotDir))


    output = subprocess.run(["git", "--git-dir=" + dotURL, "ls-tree", "-r", "HEAD"], capture_output=True, text=True)
    output = output.stdout

    for line in output.splitlines():
        file = line.split("\t")[1]

        if os.path.isfile(home + "/" + file):
            import shutil

            directory = home + "/" + "/".join(file.split("/")[:-1])
            os.makedirs(directory)
            shutil.move(home + "/" + file, directory)

    os.system("git --git-dir={} --work-tree={} checkout".format(dotDir, home))
    print("Downloaded dotfiles!")



def getWallpapers():
    global wallpaperDir

    if not os.path.isdir(wallpaperDir):
        os.makedirs(wallpaperDir)

    if wallpaperDir[-1] != "/":
        wallpaperDir += "/"

    for file in wallpapers:
        DownloadFile(wallpapers[file], wallpaperDir + file)


def getSuckless():
    pass


def compileSuckless():
    if confirm("Do you with to compile all of your suckless Utilities (You need root privilages)?"):
        import termios
        import sys
        fd = sys.stdin.fileno()
        default = termios.tcgetattr(fd)
        os.system("su -c 'for dir in {}/*/*[Mm]akefile; do make install -C $(dirname $dir); done'".format(sucklessDir))
        termios.tcsetattr(fd, termios.TCSADRAIN, default)




def getFonts(arg):
    from urllib.request import Request, urlopen
    from zipfile import ZipFile
    from io import BytesIO
    url               = [arg[0]]
    githubRegex       = arg[1]
    directory         = arg[2]

    if directory == None or directory == "":
        directory = fontsDir

    if directory[-1] != "/":
        directory += "/"

    if not os.path.isdir(directory):
        os.makedirs(directory)

    if githubRegex != "" or githubRegex != None:
        import re
        url = url[0]
        if url[-1] != "/":
            url += "/"

        url = Request(url + "releases", headers={"User-Agent": "Mozilla/5.0"})
        url = urlopen(url).read().decode()

        latestTag = re.findall("(?<=/releases/tag/).*(?=\")", url)[0]

        files = []
        for file in re.findall('(?<=href="){}(?=")'.format(githubRegex), url):
            if latestTag in file:
                files.append("https://github.com" + file)

        url = files


    for file in url:
        if file.endswith(".zip"):
            zipData = Request(file, headers={"User-Agent": "Mozilla/5.0"})
            zipData = urlopen(zipData)
            zipData = ZipFile(BytesIO(zipData.read()))
            zipData.extractall(directory)
        else:
            DownloadFile(file, directory)




suckless = (
    Choice("Dynamic Window Manager", None, None, None, "git"),
    Choice("Simple Terminal",        None, None, None, "git"),
    Choice("DwmBlocks",              None, None, None, "git"),
    Choice("Herbe",                  None, None, None, "patch"),
    Choice("Slock",                  None, None, None, "patch"),
    Choice("Devour",                 None, None, None, "")
)

fonts = (
    Choice("JetBrains Mono", None, getFonts, (
            "https://github.com/JetBrains/JetBrainsMono",
            ".*JetBrains-.*.zip", "JetBrainsMono"
        ),
        None),

    Choice("Material Icons", None, getFonts, (
            "https://github.com/google/material-design-icons/blob/master/font/MaterialIcons-Regular.ttf",
            "",
            ""),
        None),
)

mainChoice = (
    Choice("Dotfiles",                  None,     getDot,          None, "git"),
    Choice("Wallpaper(s)",              None,     getWallpapers,   None, None),
    Choice("Suckless & Other Programs", suckless, compileSuckless, None, "make"),
    Choice("Fonts",                     fonts,    None,            None, None)
)


if not CheckDep(mainChoice):
    exit(-1)

execute = drawMenu(mainChoice, False)
curses.endwin()

if execute:
    for choice in mainChoice:
        choice.execute()
