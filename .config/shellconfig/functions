#!/bin/sh
colors(){
	i=0
	while [ ${i} -ne 255 ]; do
		printf "\033[38;5;${i}mcolour${i} "
		i=$((i + 1))
	done
	printf '\n'
}


saur(){
	if [ -z "$1" ]; then
		[ -d /tmp/saur ] && cd /tmp/saur
		return
	fi

	found="$(curl -L --silent https://aur.archlinux.org/packages/$1 | grep -Po '404 - Page Not Found')"
	if [ -z "$found" ]; then
		[ ! -d /tmp/saur ] && mkdir /tmp/saur
		git clone https://aur.archlinux.org/$1.git /tmp/saur/$1 &&
		cd /tmp/saur/$1 &&
		aur_version=$(grep -m 1 pkgver PKGBUILD | awk -F'=' '{print $2}') &&
		echo "AUR version: $aur_version"
		unset aur_version
	else
		echo "Aur package not found: $1"
	fi
}


pycalc(){
	printf '#!/bin/python\nprint()\n' > /tmp/pycalc
	${EDITOR} /tmp/pycalc
	rm /tmp/pycalc
}


cheat(){ curl cheat.sh/$1 | less -Srf ; }


# DotFile "alias"
dit(){
    if [ "${1}" = "files" ]; then
		cd ${HOME}
		printf 'Red means that the file exists in the repository however it does not exist in this machine\n'
		for file in $(git --git-dir="${HOME}"/.local/dots/ --work-tree="${HOME}" ls-tree -r master --name-only); do
			[ ! -f "$HOME/${file}" ] &&
				printf '\033[38;5;1m~/%b\033[0m\n' "${file}" ||
				printf '~/%b\n' "${file}"
		done
		cd - >/dev/null
    else
        git --git-dir=$HOME/.local/dots/ --work-tree=$HOME "$@"
    fi

	unset orig_dir
	unset files
}



# TestDirectory in /tmp
tt(){
  dir=/tmp/testdir
  [ ! -d $dir ] && mkdir $dir; cd $dir
  unset dir
}


exportgpg(){
	# To import gpg keys:
	# gpg —-import /path/secret_keys.asc
	# gpg —-import /path/public_keys.asc
	# gpg --import-ownertrust < /path/ownertrust.txt


	tmpdir=/tmp/exportedGPG

	if [ -z "$1" ]; then
		[ -d $tmpdir ] && cd $tmpdir
		return
	fi

	[ ! -d $tmpdir ] && mkdir $tmpdir
	gpg --export --armor $1 > $tmpdir/public_keys.asc
	gpg --export-secret-keys --armor $1 > $tmpdir/secret_keys.asc
	gpg --export-ownertrust > $tmpdir/ownertrust.txt

	unset tmpdir
}


# n³ cd on quit (not mine)
n()
{
	if [ ! -f $HOME/.config/nnn/plugins/getplugs ]; then
		read -p "The nnn³ getplugs plugin is not installed. Download? [Y/n] " GrabPlugin

		case $GrabPlugin in
			[Yy][Ee][Ss]|[Yy]|"")
				dir=$HOME/.config/nnn/plugins
				[ ! -d "$dir" ] && mkdir --verbose "$dir"
				if [ "$(command -v curl)" ]; then
					curl -L https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs -o $HOME/.config/nnn/plugins/getplugs
				elif [ "$(command -v wget)" ]; then
					wget https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs -O $HOME/.config/nnn/plugins/getplugs
				else
					printf 'Both curl and wget is not installed... Please install one of them\n' >&2
				fi
				;;

			*) echo "Will not download" ;;
		esac
		[ -f "$dir/getplugs" ] &&
			[ ! -x "$dir/getplugs" ] &&
			chmod +x "$dir/getplugs"

		unset GrabPlugin
	fi


    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn -Had "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}


record() {
	if command -v ffmpeg >/dev/null; then
		if [ $1 = "--audio" ]; then
			ffmpeg -f pulse -i default -framerate 30 -f x11grab -i :0.0 $HOME/Recording.mkv
		else
			ffmpeg -framerate 30 -f x11grab -i :0.0 $HOME/Recording.mkv
		fi
	else
		echo "! ffmpeg is not installed !"
	fi
}


of() {
	[ -z "$(command -v openf)" ] && printf 'ERROR: `openf` does not exists...\n' && return 1
	openf -f $@
	[ -f "/tmp/openftmp" ] && cd "$(< /tmp/openftmp)" && printf 'cd -> %s\n' "${PWD}"
}
