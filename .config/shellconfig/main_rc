#!/bin/sh
# Basic interactive shell config that should work on every posix compliant shell
set -o vi   # Vi mode, works on most shells
[ "$(command -v stty)" ] && stty -ixon 	# Disable Ctrl-q and Ctrl-s
export HISTFILE=/tmp/shell_history


if [ "${BASH}" ]; then
	# Bash Specific configuration
	complete -c man which
	complete -cf sudo
	shopt -s autocd
	shopt -s checkwinsize

	[ -f /usr/share/bash-completion/bash_completion ] &&
		. /usr/share/bash-completion/bash_completion
elif [ "${ZSH_NAME}" ]; then
	# Zsh Specific configuration
	setopt autocd

	bindkey -v '^H' backward-delete-char
	bindkey -v '^?' backward-delete-char
	setopt PROMPT_SUBST
fi



# PROMPT #
# Guaranteed to work on dash, bash, zsh, and ksh
print_prompt() {
	ret=$?
	symbol="âžœ"
	bold="\033[1m"
	dir_col="\033[38;5;11m"
	branch_col="\033[38;5;8m"
	failed_col="\033[38;5;1m"
	success_col="\033[38;5;6m"
	reset="\033[0m"


	if [ "${BASH}" ]; then
		wrapper_start="\001"
		wrapper_end="\002"
	elif [ "${ZSH_NAME}" ]; then
		wrapper_start="%{"
		wrapper_end="%}"
	elif ! [ "${KSH_VERSION}" ]; then
		unset bold dir_col branch_col failed_col success_col reset
	fi


	if [ "${KSH_VERSION}" ] || { [ "${wrapper_start}" ] && [ "${wrapper_end}" ]; } ; then
		bold="${wrapper_start}${bold}${wrapper_end}"
		dir_col="${wrapper_start}${dir_col}${wrapper_end}"
		branch_col="${wrapper_start}${branch_col}${wrapper_end}"
		failed_col="${wrapper_start}${failed_col}${wrapper_end}"
		success_col="${wrapper_start}${success_col}${wrapper_end}"
		reset="${wrapper_start}${reset}${wrapper_end}"
	fi


	if ! [ "${PWD%${HOME}*}" ]; then
		printf '%b%b%s' "${bold}" "${dir_col}" "~${PWD#${HOME}}"
	else
		printf '%b%b%s' "${bold}" "${dir_col}" "${PWD}"
	fi


	branch="$(git branch --show-current 2>&-)"
	[ "${branch}" ] && printf '%b [ %s ]' "${branch_col}" "${branch}"


	if [ ${ret} -eq 0 ]; then
		printf '\n%b%s%b ' "${success_col}" "${symbol}" "${reset}"
	else
		printf '\n%b%s%b ' "${failed_col}" "${symbol}" "${reset}"
	fi
}
if [ "${BASH}" ] || [ "${ZSH_NAME}" ]; then
	export PS1="\$(print_prompt)"
else
	export PS1="\$(print_prompt 1)"
fi




# ALIASES #
alias emacs="emacs -nw"
alias mkdir="mkdir -pv"
alias diff="diff --color=always"
alias grep="grep --color=auto"
alias wget='wget --hsts-file="/tmp/wget-hsts"'
alias sxiv="sxiv -o"
alias ls="ls --color --group-directories-first"
alias mv="mv -i"
alias rm="rm -i"
alias cp="cp -i"
alias ip="ip --color=auto"



# Functions #
colors() {
	i=0
	while [ ${i} -ne 255 ]; do
		printf "\033[38;5;${i}mcolour${i} "
		i=$((i + 1))
	done
	printf '\n'
	unset i
}


dit() {
	if [ "${1}" = "files" ]; then
		printf "Red means that the file exists in the repo but doesn't in this machine.\n"
		while read line; do
			if [ -f "$HOME/${line}" ]; then
				printf '~/%b\n' "${line}"
			else
				printf '\033[38;5;1m~/%b\033[0m\n' "${line}"
			fi
		done <<-EOF
		$(cd "${HOME}"; git --git-dir="${HOME}"/.local/dots/ --work-tree="${HOME}" ls-tree -r master --name-only)
		EOF
	else
		git --git-dir=$HOME/.local/dots/ --work-tree=$HOME "$@"
	fi
}


e() {
	if [ "${EDITOR}" = "emacs" ] && [ "$(command -v emacsclient)" ]; then
		emacsclient -a ${EDITOR} "$@"
	else
		${EDITOR} "$@"
	fi
}


fetsh() {
	bin=$(command -v fet.sh)
	if [ "${bin}" ]; then
		url="https://github.com/6gk/fet.sh/raw/master/fet.sh"
		if [ "$(command -v curl)" ]; then
			{ curl -s -L -H "User-Agent: Mozilla/5.0"  "${url}" ||
				  printf 'printf "Failed to get fet.sh with curl\\n"\n'; } | sh
		elif [ "$(command -v wget)" ]; then
			{ wget -U 'Mozilla/5.0' -qO- "${url}" ||
				  printf 'printf "Failed to get fet.sh with wget\\n"\n'; } | sh
		else
			printf 'ERROR: Dependencies not met (curl or wget)\n' >&2
		fi
		unset url
	else
		"${bin}"
	fi
	unset bin
}

doar() { eval "su -c '$@'"; }



# Misc ENV Variable Exporting
export UEBERZUG_FIFO=/tmp/ueberzug-fifo

# LESS (for man pages)
export LESS_TERMCAP_mb=$'\033[1;32m'
export LESS_TERMCAP_md=$'\033[1;32m'
export LESS_TERMCAP_me=$'\033[0m'
export LESS_TERMCAP_se=$'\033[0m'
export LESS_TERMCAP_so=$'\033[01;33m'
export LESS_TERMCAP_ue=$'\033[0m'
export LESS_TERMCAP_us=$'\033[1;4;31m'



# Nix
[ -f "${HOME}/.nix-profile/etc/profile.d/nix.sh" ] &&
	. "${HOME}/.nix-profile/etc/profile.d/nix.sh"
