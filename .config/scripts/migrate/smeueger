#!/bin/sh
# ------------------------------------------------
# Script Name    - smeueger
# Author Name    - Smeueg
# Author Email   - Smeueg@gmail.com
# Author Gitlab  - https://gitlab.com/Smeueg
# Last Updated   - Thu  3 Mar 08:41:57 WIB 2022
# ------------------------------------------------
# Info:
#   The bootstraping script that makes you more Smeueg INSTANTLY.
#   Tested with bash, yash, ash, dash, and zsh
#
# TODO:
#   - Clean Up
#   - Test out full install in another system
#   - Make script ksh compatible

# Variables
WALLPAPER_DIR="${HOME}/.config/rice/"
WALLPAPER_URL="https://i.imgur.com/DVJsvfN.png"
DOTFILE_DIR="${HOME}/.local/dots"
FONT_DIR="${HOME}/.local/share/fonts/"


# Character Variable
special="$(printf '\033')"
newline="
"
choices="
Dotfiles              {git,mv}     | install_dotfiles
Font (JetBrainsMono)  {wget||curl} | install_font
Wallpaper             {wget||curl} | install_wallpaper
Nix Package Manager   {wget||curl} | install_nix
TFL's Simplify Ubuntu {wget||curl} | install_SU
"

# Utility functions
error() { printf "\033[31m\033[1m[ERROR]\033[0m ${1}\033[0m\n" >&2; }
warning() { printf "\033[33m\033[1m[WARNING]\033[0m ${1}\n"; }


check_depend() { [ "$(command -v "${1}")" ]; }


# Check for curl or wget
if check_depend curl; then
	fetch() { curl -L "${1}" -o "${2}"; }
elif check_depend wget; then
	fetch() { WGETRC= wget --no-hsts "${1}" -O "${2}"; }
fi


# Read a single character some shells, including bash and zsh, has read -n1
# which is better to use than dd. So use that if it's available
if [ "${BASH_VERSION}" ] || [ "${KSH_VERSION}" ]; then
	read_char() { IFS= read -n 1 input; }
elif [ "${ZSH_NAME}" ]; then
	emulate sh
	read_char() { IFS= read -k 1 input; }
else
	stty_settings=$(stty -g)
	read_char() {
		input="$(dd bs=1 count=1 2>&1)"
		input="${input%${input#?}}"
	}
fi


# Prompt user with Y or no question, with ${1} as the prompt
# Usage: `confirm "Are you sure?"` -> "Are you sure? [Y\n] "
confirm() {
	printf '%s [Y\\n] ' "${1}"
	read reply
	printf '\n'
	echo "${reply}"
	case "${reply}" in
		[Yy][Ee][Ss]|[Yy]|"") return 0 ;;
		*) return 1;;
	esac
}


# Replace $1 with $2 in $3
# Usage: `replace "foo" "bar" "foo jar bar"` ─> "bar jar bar"
replace() {
	_replace() {
		for i in ${2}; do
			str="${str}${i}${1}"
		done
		printf '%s\n' "${str%${1}}"
		unset str
	}
	IFS="${1}" _replace "${2}" "${3}"
	unset -f _replace
}


# Pick a choice interactively with ${1} being the string
# Usage: `mini_choice "$(printf 'foo\nbar\nbaz')"`
mini_choice() {
	chosen=0
	while :; do
		i=0
		while read line; do
			if [ ${i} -eq ${chosen%%:*} ]; then
				printf '\033[7m %s \033[0m\n' "${line}"
				chosen_line="${line}"
			else
				printf ' %s \n' "${line}"
			fi
			i=$((i+1))
		done <<-EOF
		${1}
		EOF

		read_char
		if [ "${input}" = "${special}" ]; then
			read_char
			read_char
			case "${input}" in
				"A") input="k" ;;
				"B") input="j" ;;
			esac
		fi
		stty echo

		 case "${input}" in
			 "k") [ ${chosen} -eq 0 ] || chosen=$((chosen-1));;
			 "j") [ ${chosen} -eq $((i-1)) ] || chosen=$((chosen+1));;
			 "q")
				 choice_out=""
				 return ;;
			 "${newline}"|" ")
				 printf "\033[${i}A\033[J"
				 choice_out="${chosen_line}"
				 unset chosen_line chosen input i
				 return ;;
		 esac
		 printf "\033[${i}A\033[J"
	 done
}



# Installation functions

dot_sync() {
	# Backup files that are different from the git repo
	printf 'Backing up existing files...\n'
	while read file; do
		file="${file#*$(printf '\t')}"
		dir="${HOME}/DotBackup/${file%/*}"
		file="${HOME}/${file}"

		if ! [ -d "${dir}" ] && ! mkdir --parents --verbose "${dir}"; then
			error "Failed to create directory '${dir}'\n"
			return
		fi
		mv --verbose "${file}" "${dir}"
	done <<-EOF
	$(git --git-dir=${DOTFILE_DIR} --work-tree=$HOME diff --name-status)
	EOF

	# Sync bare repo
	printf 'Syncing dotfiles...\n'
	if ! git --git-dir="${DOTFILE_DIR}" --work-tree="${HOME}" checkout; then
		error "Failed to run 'git --git-dir=${DOTFILE_DIR} --work-tree=${HOME}'"
		return
	fi
}

dot_clone() {
	# Clone as bare repo
	printf 'Cloning bare repo...\n'
	if ! git clone --bare "${DOTFILE_URL}" "${DOTFILE_DIR}"; then
		error "Failed to run 'git clone --bare ${DOTFILE_URL} ${DOTFILE_DIR}'"
		return 1
	fi
	# Do not show untracked files
	printf 'Configuring repo to not show untracked files...\n'
	if ! git --git-dir="${DOTFILE_DIR}" config status.showUntrackedFiles no; then
		warning "Failed to run 'git --git-dir=${DOTFILE_DIR} config status.showUntrackedFiles no'"
		return 1
	fi
}

install_dotfiles() {
	printf 'Installing Dotfiles...\n'
	if ! [ "$(git --git-dir=${DOTFILE_DIR} rev-parse 2>&1)" ]; then
		printf '%s is already a git repo, overwrite?\n' "${DOTFILE_DIR}"
		mini_choice "$(printf 'Overwrite and Sync\nSync\nCancel')"
		case "${choice_out}" in
			"Overwrite and Sync")
				dot_clone
				dot_sync
				;;
			"Sync")
				dot_sync
				;;
			*)
				printf "Won't do anything...\n"
				;;
		esac
		return
	fi
	dot_clone
	dot_sync
}


install_nix() {
	# Check if nix is already installed
	if check_depend nix; then
		printf 'Nix seems to already be installed (command nix found), exiting...\n'
		return
	elif [ -d /nix ]; then
		printf 'Nix seems to already be installed (`/nix` exists), exiting...\n'
		return
	fi

	# Prompt for confirmation on installing in single-user mode
	if confirm "WARNING: This will install nix in single-user mode, continue?"; then
		printf 'Continuing nix installation...\n'
	else
		printf 'Not running nix installation...\n'
		return
	fi

	if [ "$(uname)" = "Linux" ]; then
		su -c "mkdir -m 0755 /nix && chown ${USER} /nix"
		[ -d /nix ] || return
	fi

	sh -s -- --no-daemon <<-EOF
	$(curl -L https://nixos.org/nix/install)
	EOF

	# Removes the line that was added by nix's auto install script, i.e:
	# if [ -e ${HOME}/.nix-profile/etc/profile.d/nix.sh ]; then . ${HOME}/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
	[ -f "${HOME}/.profile" ] || return
	file="$(while IFS= read line; do
			 if ! [ "${line}" = "if [ -e ${HOME}/.nix-profile/etc/profile.d/nix.sh ]; then . ${HOME}/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer" ]; then
				 printf '%s\n' "${line}"
			 fi
		 done < ${HOME}/.profile
	  )"

	printf '%s\n' "${file}" > "${HOME}/.profile"
}


install_font() {
	# Will install JetBrainsMono
	# Create directory FONT_DIR if needed
	FONT_DIR="${FONT_DIR%/}/JetBrainsMono Nerd Font"
	[ -d "${FONT_DIR}" ] ||
		mkdir --parents --verbose "${FONT_DIR}" || return

	while read font; do
		[ "${font}" ] || continue
		[ "${font##*/ryanoasis/nerd-fonts/tree/master/patched-fonts/JetBrainsMono/Ligatures/*}" ] && continue
		font="${font%\"*}"
		font="${font##*/}"
		while read line; do
			[ "${line}" ] || continue
			[ "${line##*Complete*Mono.ttf*}" ] && continue
			line="${line#*href=\"}"
			line="${line%\"*}"
			fetch "https://github.com${line%/blob/*}/raw/${line#*/blob/}" "${FONT_DIR}/JetBrainsMono Nerd Font ${font} Complete.ttf"
		done <<-EOF
		$(fetch "https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/JetBrainsMono/Ligatures/${font}/complete" -)
		EOF
	done <<-EOF
	$(fetch https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/JetBrainsMono/Ligatures -)
	EOF
}


install_wallpaper() {
	printf 'Getting wallpaper...\n'
	fetch "${WALLPAPER_URL}" "${WALLPAPER_DIR%/}/Shark Space.png"
}

install_SU() {
	sh <<-EOF
	$(curl -L "https://github.com/terminalforlife/Extra/raw/master/source/simplify-ubuntu/simplify-ubuntu-installer")
	EOF
}


# MAIN SELECTION #
# Check Dependencies
while read line; do
	[ "${line}" ] || continue
	deps="${line#*\{}"
	deps="${deps%\}*}"
	deps_satisfied=:
	for dep in $(replace "," " " "${deps}"); do
		if ! [ "${dep##*||*}" ]; then
			deps_satisfied=false
			for dep in $(replace "||" " " "${dep}"); do
				if [ "$(command -v "${dep}")" ]; then
					deps_satisfied=:
					break
				fi
			done
		elif ! [ "$(command -v "${dep}")" ]; then
			deps_satisfied=false
			break
		fi
	done


	# Format Choices
	[ "${tmp}" ] && tmp="${tmp}\n"
	if ${deps_satisfied}; then
		tmp="${tmp}[ ] ${line}"
	else
		tmp="${tmp}[-] ${line}"
		line="${line%%\{*}"
		line="${line%${line##*[! ]}} "
	fi
done <<EOF
${choices}
EOF

choices=$(printf "${tmp}\nContinue\n")
unset tmp

warning 'If the script fails and the terminal is acting strange, please run `stty icanon echo`'
printf '\033[32m\033[1mj/↓:Down  k/↑:Up  q:quit  Enter/Space:Select\033[0m\n'
printf 'Options:\n'
chosen=0

# Restore stty settings when ctrl-c'ing
if [ "${stty_settings}" ]; then
	stty -icanon
	trap 'stty "${stty_settings}"; exit 1' INT
fi
while :; do
	i=0
	while read line; do
		# Highlight Chosen Line
		if [ "${line%${line#???}}" = "[-]" ]; then
			printf '\033[31m'
			deps="${line%%\}*}"
			deps="${deps##*\{}"
			deps="$(replace "||" " or " "${deps}")"
			deps="$(replace ',' '|' "${deps}")"
			line="${line%%\{*}"
			line="${line%${line##*[! ]}} "
			line="${line} (Dependencies: ${deps})"
		else
			line="${line%%\{*}"
			line="${line%${line##*[! ]}} "
		fi

		if [ ${i} -eq ${chosen} ]; then
			printf '\r\033[7m %s\033[0m\n' "${line}"
		else
			printf '\r%s\033[0m\n' "${line}"
		fi
		i=$((i+1))
	done <<-EOF
	${choices}
	EOF

	read_char
	if [ "${input}" = "${special}" ]; then
		read_char
		read_char
		case "${input}" in
			"A") input="k" ;;
			"B") input="j" ;;
		esac
	fi


	case "${input}" in
		"k") [ ${chosen} -ne 0 ] && chosen=$((chosen-1));;
		"j") [ ${chosen} -ne $((i-1)) ] && chosen=$((chosen+1));;
		"q") printf "\r\033[2A\033[${i}A\033[J"
			 choices=""
			 break ;;
		"${newline}"|" "|$'\n'|"")
			printf '\033[A'
			if [ ${chosen} -eq $((i-1)) ]; then
				printf "\033[2A\033[${i}A\033[J"
				break
			fi

			# Toggle chosen option
			j=0
			unset tmp
			while read line; do
				if [ "${j}" -ne "${chosen}" ]; then
					tmp="${tmp}${newline}${line}"
					j=$((j+1))
					continue
				fi

				if [ "${line%${line#???}}" = "[X]" ]; then
					tmp="${tmp}${newline}[ ]${line#???}"
				elif [ "${line%${line#???}}" = "[ ]" ]; then
					tmp="${tmp}${newline}[X]${line#???}"
				else
					tmp="${tmp}${newline}${line}"
				fi

				j=$((j+1))
			done <<-EOF
			${choices}
			EOF
			choices=$(printf '%s' "${tmp#?}")
			;;
	esac
	printf "\033[${i}A\033[J"
done


run_scripts() {
	for line in ${choices}; do
		[ "${line%%\[X\]*}" ] && continue
		echo "${line#*| }"
	done
}

IFS="${newline}" run_scripts
