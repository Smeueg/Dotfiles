#!/bin/sh

if ! [ "$(command -v youtube-dl)" ]; then
	printf "[\033[1;31mERROR\033[0m] 'youtube-dl' isn't installed. Exiting\n" >&2
	exit 1
fi


music_dir="${HOME}/Music"
printf "Insert playlist url (Leave blank for smeusic playlist): "
read pl_url
if ! [ "${pl_url}" ]; then
	printf '\033[A\r\033[2K\r'
	printf "[\033[1;32mNOTICE\033[0m] Downloading Smeueg's playlist\n\n\n"
	pl_url="https://www.youtube.com/playlist?list=PLRV1hc8TIW-7znQIWaVarxdUxf7lskmBc"
elif [ "${pl_url%%https://www.youtube.com/playlist\?list=*}" ]; then
	printf '[\033[1;31mERROR\033[0m] Invalid URL\n' >&2
	exit 1
else
	printf '\033[A\r\033[2K\r'
fi


if ! [ "${COLUMNS}" ]; then
	get_cols() { COLUMNS=$(stty size); COLUMNS=${COLUMNS#* }; }
else
	get_cols() { COLUMNS=${COLUMNS}; }
fi


# Exit if "${music_dir}" doesn't exist and can't be created
if ! [ -d "${music_dir}" ]; then
	mkdir -pv "${music_dir}" || exit 1
fi


replace() {
	# Replace ${1} with ${2} in the variable ${3}
	str=${3}
	while ! [ "${str%%*${1}*}" ]; do
	 	str="${str%%${1}*}${2}${str#*${1}}"
	done
	printf '%s\n' "${str}"
	unset str
}


header() {
	i=0
	get_cols
	while [ ${i} -ne ${COLUMNS} ]; do
		str="${str}â”€"
		i=$((i+1))
	done
	printf '\033[1;31m%s\033[0m' "${str}"
	[ "${1}" ] &&
		printf "\r\033[$(((COLUMNS - ${#1} - 2) / 2))C ${1} \n"
	unset str
}


get_title_id() {
	youtube-dl "${pl_url}" --flat-playlist --get-id -e |
		{
			while { read -r title; read id; }; do
				title=$(IFS="/" replace "\\" "${title}")
				title=$(replace "/" "\\" "${title}")
				tmp="${tmp}${title}:${id}${newline}"
			done
			printf '%s\n' "${tmp}"
		}
}


sync_download() {
	# Download song's that aren't downloaded yet
	header "Downloading Songs"
	ran=false
	for line in ${output}; do
		title=${line%:*}
		url="https://www.youtube.com/watch?v=${line##*:}"
		if ! [ -f "${music_dir%/}/${title}.mp3" ]; then
			ran=:
		   	youtube-dl "${url}" \
					   -x \
		 			   --audio-format mp3 \
		 			   --add-metadata --metadata-from-title "%(title)s" \
		 			   --postprocessor-args \
		 			   "-acodec libmp3lame" \
		 			   -o "${music_dir}/${title}.%(ext)s"
		fi
	done
	${ran} || printf 'No songs need to be downloaded\n'
	header
}


sync_remove() {
	# Remove song's that aren't in the playlist anymore
	header "Removing Songs No Longer In The Playlist"
	ran=false
	for file in "${music_dir%/}"/*; do
		file=${file#${music_dir%/}/}

		for line in ${output}; do
			[ "${line%:*}.mp3" = "${file}" ] && continue 2
		done
		ran=:
		rm -v "${music_dir%/}/${file}"
	done
	${ran} || printf 'No files to remove\n'
		header
}


newline="
"

output=$(get_title_id)
IFS=${newline} sync_download
printf '\n\n\n'
IFS=${newline} sync_remove
