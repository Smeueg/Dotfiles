#!/bin/sh
# Like printf but instead of printing, this opens files (or changes current DIRectory)

# Variables
DIR="${PWD}"
ARGS="${@}"
CMD=fzf

HIDDEN=false
ADJUST=false
USETERM=true

prune="
*BraveSoftware/*
*/dots/*
*/.git/*
*/_cacache/*
*.cache/*
"

usage="\
Usage: [--help] [--dir DIRECTORY] [--fzf] [--dmenu DMENU_ARGS]
	h, --help,   Show usage
	d, --dir     Change target directory to DIRECTORY
	   --fzf,    Use fzf
	   --dmenu,  Use dmenu instead of fzf and give arguments if present to dmenu (MUST BE THE LAST ARGUMENT)\
"

avoid_str="
	$(
		for i in ${prune}; do
			printf '\t%s) return 0;;\n' "$i"
		done
	)
"

avoid() {
	eval "
	case \"${1}\" in
		${avoid_str}
	esac
	return 1"
}


list_files() {
	if true; then
		for fd in "${1}"/.* "${1}"/*; do
			avoid "${fd}" && continue
			if [ "${fd#${fd%???}}" = '/..' ] || [ "${fd#${fd%??}}" = '/.' ]; then
				continue
			elif [ -d "${fd}" ]; then
				printf '%s\n' "${fd}"
				list_files "${fd}"
			elif [ ! -f "${fd}" ]; then
				continue
			else
				printf '%s\n' "${fd}"
			fi
		done
	else
		for fd in "${1}"/*; do
			avoid "${fd}" && continue
			if [ -d "${fd}" ]; then
				printf '%s\n' "${fd}"
				list_files "${fd}"
			elif [ ! -f "${fd}" ]; then
				continue
			else
				printf '%s\n' "${fd}"
			fi
		done
	fi
}


handle_args() {
	while getopts 'd:h-:' opt; do
		case "${opt}" in
			h)
				printf '%s\n' "${usage}"
				exit 0
				;;

			d)
				DIR=${OPTARG}
				;;

			-)
				case ${OPTARG} in
					dmenu)
						CMD=dmenu
						tmp=${@}
						DMENU_ARGS=${tmp#*--dmenu}
						unset tmp
						return
						;;

					dir)
						tmp=${@}
						handle_args -d ${tmp#*--dir}
						unset tmp
						return
						;;

					fzf)
						CMD=fzf
						;;

					help)
						handle_args -h
						;;

					*)
						printf 'ERROR: Unknown option `--%s`\n' "${OPTARG}" >&2
						exit
						;;
				esac
				;;

			*)
				printf 'ERROR: Unknown option `--%s`\n' "${OPTARG}" >&2
				exit
				;;
		esac
	done

}


open() {
	[ -d "${1}" ] && printf "${1}" >/tmp/openftmp
	[ ! -f "${1}" ] && exit
	[ -f "/tmp/openftmp" ] && rm "/tmp/openftmp"

	in_tty=$(tty)
	[ -z ${tty##/dev/tty*} ] &&
		in_tty=true || in_tty=false

	case $(file --mime-type --brief "${1}") in
		text/*)
			if [ ! -t 0 ]; then
				${TERMINAL} -e ${EDITOR} "${1}"
			else
				${EDITOR} "${1}"
			fi
			;;

		*/pdf)
			if ! ${in_tty}; then
				if [ -n "$(command -v zathura)" ]; then
					if [ -n "$(command -v devour)" ] && [ -n "${DISPLAY}" ]; then
						devour zathura "${1}"
					else
						zathura "${1}"
					fi
				fi
			else
				[ -n "$(command -v fbgs)" ] ||
					printf 'Error `fbgs` is not installed, will not open pdf in tty...\n' ||
					fbgs "${1}"
			fi
			;;

		image/*)
			if ! ${in_tty}; then
				if [ -n "$(command -v sxiv)" ]; then
					if [ -n "$(command -v zathura)" ] devour && [ -n "${DISPLAY}" ]; then
						devour sxiv "${1}"
					else
						sxiv "${1}"
					fi
				fi
			else
				[ -n "$(command -v fib)" ] ||
					printf 'ERROR: `fib` is not installed, will not open image in tty\n' ||
					fib "${1}"
			fi
			;;
	esac
}


main() {
	handle_args ${ARGS}
	if [ "${CMD}" = "fzf" ] ; then

		# IF not running from the terminal, spawn new terminal
		if [ ! -t 0 ]; then
			$TERMINAL -e $0
			exit
		fi
	fi

	open "$(list_files ${DIR} | ${CMD} ${DMENU_ARGS})"
}
main
