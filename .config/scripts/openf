#!/bin/sh
# Like printf but instead of printing, this opens files (or changes current DIRectory)

# Variables
DIR="${PWD}"
ARGS="${@}"
UI=false
CMD=fzf

SWALLOW=true
HIDDEN=false
ADJUST=false
USETERM=true



ARGS_STR=$(for arg in "${@}"; do
	printf '%s\n' "${arg}"
done)

prune="
*BraveSoftware/*
*/dots/*
*/.git/*
*/_cacache/*
*.cache/*
"

usage="\
Usage: [-h, --help] [[-d, --dir] DIRECTORY] [--fzf] [--dmenu DMENU_ARGS] [--file FILE]
	-h,	--help,   Show usage
	-d,	--dir,    Use a ui and pick recursively from DIRECTORY
	-f,	--fzf,    Use fzf
		--dmenu,  Use dmenu instead of fzf and give arguments if present to dmenu (MUST BE THE LAST ARGUMENT)\
"

avoid_str="
	$(
		for i in ${prune}; do
			printf '\t%s) return 0;;\n' "$i"
		done
	)
"

avoid() {
	eval "
	case \"${1}\" in
		${avoid_str}
	esac
	return 1"
}


list_files() {
	if true; then
		for fd in "${1}"/.* "${1}"/*; do
			avoid "${fd}" && continue
			if [ "${fd#${fd%???}}" = '/..' ] || [ "${fd#${fd%??}}" = '/.' ]; then
				continue
			elif [ -d "${fd}" ]; then
				printf '%s\n' "${fd}"
				list_files "${fd}"
			elif [ ! -f "${fd}" ]; then
				continue
			else
				printf '%s\n' "${fd}"
			fi
		done
	else
		for fd in "${1}"/*; do
			avoid "${fd}" && continue
			if [ -d "${fd}" ]; then
				printf '%s\n' "${fd}"
				list_files "${fd}"
			elif [ ! -f "${fd}" ]; then
				continue
			else
				printf '%s\n' "${fd}"
			fi
		done
	fi
}


open() {
	[ -d "${1}" ] && printf "${1}" >/tmp/openftmp
	[ ! -f "${1}" ] && exit
	[ -f "/tmp/openftmp" ] && rm "/tmp/openftmp"

	if [ -z "${DISPLAY}" ]; then
		in_tty=true
	else
		in_tty=false
	fi

	case $(file --mime-type --brief "${1}") in
		text/*)
			if [ ! -t 0 ]; then
				${TERMINAL} -e ${EDITOR} "${1}"
			else
				${EDITOR} "${1}"
			fi
			;;

		*/pdf)
			if ! ${in_tty}; then
				if [ -n "$(command -v zathura)" ]; then
					if [ -n "$(command -v devour)" ] && ${SWALLOW}; then
						devour zathura "${1}"
					else
						zathura "${1}"
					fi
				fi
			else
				[ -n "$(command -v fbgs)" ] ||
					printf 'Error `fbgs` is not installed, will not open pdf in tty...\n' ||
					fbgs "${1}"
			fi
			;;

		image/*)
			if ! ${in_tty}; then
				if [ -n "$(command -v sxiv)" ]; then
					if [ -n "$(command -v devour)" ] && ${SWALLOW} ; then
						devour sxiv "${1}"
					else
						sxiv "${1}"
					fi
				fi
			else
				[ -n "$(command -v fib)" ] ||
					printf 'ERROR: `fib` is not installed, will not open image in tty\n' ||
					fib "${1}"
			fi
			;;
	esac
}


handle_args() {
	while getopts 'fd:h-:' opt; do
		case "${opt}" in
			f)
				UI=true
				CMD=fzf
				;;

			h)
				printf '%s\n' "${usage}"
				exit 0
				;;

			d)
				UI=true
				CMD=fzf
				DIR=${OPTARG}
				;;

			-)
				case ${OPTARG} in
					file)
						IFS='
						'

						run=false
						for arg in $ARGS_STR; do
							if ! ${run} && [ "${arg}" = '--file' ]; then
								run=true
								continue
							fi

							open "${arg}"
						done
						exit
						;;


					noswallow)
						SWALLOW=false
						;;

					dmenu)
						UI=true
						CMD=dmenu
						DMENU_ARGS=${ARGS#*--dmenu}
						return
						;;

					fzf)
						UI=true
						CMD=fzf
						;;

					dir)
						handle_args -d ${ARGS#*--dir}
						return
						;;

					help)
						handle_args -h
						;;

					*)
						printf 'ERROR: Unknown option `--%s`\n' "${OPTARG}" >&2
						exit
						;;
				esac
				;;

			*)
				printf 'ERROR: Unknown option `--%s`\n' "${OPTARG}" >&2
				exit
				;;
		esac
	done
}


main() {
	handle_args ${@}

	if ${UI}; then
		open "$(list_files ${DIR} | ${CMD} ${DMENU_ARGS})"
	else
		IFS='
		'

		run=false
		for arg in $ARGS_STR; do
			if ${run}; then
				run=true
				continue
			fi

			open "${arg}"
		done
	fi
}
main ${@}
